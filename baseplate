-- Initialize services and variables
local Workspace = game:GetService("Workspace")
local Players = game:GetService("Players")
local Player = Players.LocalPlayer

-- Create or get folder for baseplates
local baseplateFolder = Workspace:FindFirstChild("InfiniteBaseplates")
if not baseplateFolder then
    baseplateFolder = Instance.new("Folder")
    baseplateFolder.Name = "InfiniteBaseplates"
    baseplateFolder.Parent = Workspace
end

-- Check for toggle state
if _G.InfiniteBaseplatesActive then
    -- If already active, disable
    _G.InfiniteBaseplatesActive = false

    -- Remove all baseplates
    for _, part in ipairs(baseplateFolder:GetChildren()) do
        if part.Name == "GrassBaseplate" then
            part:Destroy()
        end
    end

    return
end

-- Enable baseplates
_G.InfiniteBaseplatesActive = true

-- Baseplate settings
local baseplateSize = 2000
local baseplateSpacing = 0
local baseplateThickness = 4
local baseplateGrid = {}
local selectedColor = Color3.fromRGB(34, 139, 34)  -- Forest Green

-- Variables for freezing/restoring avatar
local frozen = false
local originalAnchoredStates = {}

-- Function to get Y position for baseplate
local function getBaseplateYPosition(playerPosition)
    local character = Player.Character
    if character and character:FindFirstChild("HumanoidRootPart") then
        local humanoidRootPart = character.HumanoidRootPart
        local rayOrigin = humanoidRootPart.Position
        local rayDirection = Vector3.new(0, -1000, 0)
        local raycastParams = RaycastParams.new()
        raycastParams.FilterType = Enum.RaycastFilterType.Blacklist
        raycastParams.FilterDescendantsInstances = {character, baseplateFolder}
        local raycastResult = Workspace:Raycast(rayOrigin, rayDirection, raycastParams)
        if raycastResult then
            return raycastResult.Position.Y - (baseplateThickness / 2) + 0.001
        else
            return playerPosition.Y - 20
        end
    end
    return 0
end

-- Function to create a baseplate
local function addGrassBaseplate(position)
    local key = tostring(position.X) .. "," .. tostring(position.Z)
    if baseplateGrid[key] then return end

    local grassBaseplate = Instance.new("Part")
    grassBaseplate.Name = "GrassBaseplate"
    grassBaseplate.Size = Vector3.new(baseplateSize, baseplateThickness, baseplateSize)
    grassBaseplate.Anchored = true
    grassBaseplate.Material = Enum.Material.SmoothPlastic
    grassBaseplate.Color = selectedColor
    grassBaseplate.Position = position
    grassBaseplate.Transparency = 0.5
    grassBaseplate.CanCollide = true
    grassBaseplate.Parent = baseplateFolder
    
    baseplateGrid[key] = grassBaseplate
end

-- Function to create baseplates around the player
local function createBaseplatesAroundPlayer()
    local character = Player.Character
    if not character or not character:FindFirstChild("HumanoidRootPart") then return end
    local playerPosition = character.HumanoidRootPart.Position
    local sizeMultiplier = baseplateSize + baseplateSpacing
    local baseplateY = getBaseplateYPosition(playerPosition)
    
    for x = -1, 1 do
        for z = -1, 1 do
            local gridX = math.floor(playerPosition.X / sizeMultiplier) * sizeMultiplier + (x * sizeMultiplier)
            local gridZ = math.floor(playerPosition.Z / sizeMultiplier) * sizeMultiplier + (z * sizeMultiplier)
            addGrassBaseplate(Vector3.new(gridX, baseplateY, gridZ))
        end
    end
end

-- Freeze/unfreeze functions
local function freezeAvatar()
    local character = Player.Character
    if character then
        originalAnchoredStates = {}
        for _, part in pairs(character:GetDescendants()) do
            if part:IsA("BasePart") then
                table.insert(originalAnchoredStates, {part = part, wasAnchored = part.Anchored})
                part.Anchored = true
            end
        end
        frozen = true
    end
end

local function unfreezeAvatar()
    for _, info in ipairs(originalAnchoredStates) do
        if info.part and info.part.Parent then
            info.part.Anchored = info.wasAnchored
        end
    end
    frozen = false
end

-- Main loop to generate baseplates
spawn(function()
    freezeAvatar()

    -- Clear old baseplates if any
    for _, part in ipairs(baseplateFolder:GetChildren()) do
        if part.Name == "GrassBaseplate" then
            part:Destroy()
        end
    end
    baseplateGrid = {}

    -- Create initial baseplates
    createBaseplatesAroundPlayer()
    
    -- Continuously update baseplates
    spawn(function()
        while _G.InfiniteBaseplatesActive do
            wait(1)
            createBaseplatesAroundPlayer()
        end
    end)
    
    wait(1)
    unfreezeAvatar()
end)
